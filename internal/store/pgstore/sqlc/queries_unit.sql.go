// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries_unit.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const autocompleteUnitByLikeName = `-- name: AutocompleteUnitByLikeName :many
SELECT id, name, short_name FROM unit
WHERE name ~* $1 ORDER BY name ASC LIMIT 10
`

func (q *Queries) AutocompleteUnitByLikeName(ctx context.Context, name string) ([]Unit, error) {
	rows, err := q.db.Query(ctx, autocompleteUnitByLikeName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Unit
	for rows.Next() {
		var i Unit
		if err := rows.Scan(&i.ID, &i.Name, &i.ShortName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createUnit = `-- name: CreateUnit :one
INSERT INTO unit (name, short_name) VALUES ($1, $2)
RETURNING id, name, short_name
`

type CreateUnitParams struct {
	Name      string
	ShortName pgtype.Text
}

func (q *Queries) CreateUnit(ctx context.Context, arg CreateUnitParams) (Unit, error) {
	row := q.db.QueryRow(ctx, createUnit, arg.Name, arg.ShortName)
	var i Unit
	err := row.Scan(&i.ID, &i.Name, &i.ShortName)
	return i, err
}

const deleteUnit = `-- name: DeleteUnit :exec
DELETE FROM unit
WHERE id = $1
`

func (q *Queries) DeleteUnit(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUnit, id)
	return err
}

const fetchPaginatedUnits = `-- name: FetchPaginatedUnits :many
SELECT id, name, short_name FROM unit
ORDER BY name LIMIT $1 OFFSET $2
`

type FetchPaginatedUnitsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) FetchPaginatedUnits(ctx context.Context, arg FetchPaginatedUnitsParams) ([]Unit, error) {
	rows, err := q.db.Query(ctx, fetchPaginatedUnits, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Unit
	for rows.Next() {
		var i Unit
		if err := rows.Scan(&i.ID, &i.Name, &i.ShortName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUnitById = `-- name: FindUnitById :one
SELECT id, name, short_name FROM unit
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindUnitById(ctx context.Context, id uuid.UUID) (Unit, error) {
	row := q.db.QueryRow(ctx, findUnitById, id)
	var i Unit
	err := row.Scan(&i.ID, &i.Name, &i.ShortName)
	return i, err
}

const getUnitTableSize = `-- name: GetUnitTableSize :one
SELECT count(*) AS exact_count FROM unit
`

func (q *Queries) GetUnitTableSize(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getUnitTableSize)
	var exact_count int64
	err := row.Scan(&exact_count)
	return exact_count, err
}

const updateUnit = `-- name: UpdateUnit :one
UPDATE unit
  set name = $2,
  short_name = $3
WHERE id = $1
RETURNING id, name, short_name
`

type UpdateUnitParams struct {
	ID        uuid.UUID
	Name      string
	ShortName pgtype.Text
}

func (q *Queries) UpdateUnit(ctx context.Context, arg UpdateUnitParams) (Unit, error) {
	row := q.db.QueryRow(ctx, updateUnit, arg.ID, arg.Name, arg.ShortName)
	var i Unit
	err := row.Scan(&i.ID, &i.Name, &i.ShortName)
	return i, err
}
