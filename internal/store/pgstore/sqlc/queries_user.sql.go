// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries_user.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email, password, first_name, last_name
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, email, first_name, last_name, role
`

type CreateUserParams struct {
	Email     string
	Password  string
	FirstName string
	LastName  pgtype.Text
}

type CreateUserRow struct {
	ID        uuid.UUID
	Email     string
	FirstName string
	LastName  pgtype.Text
	Role      Userrole
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Role,
	)
	return i, err
}

const createUserWithRole = `-- name: CreateUserWithRole :one
INSERT INTO users (
  email, password, first_name, last_name, role
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, email, first_name, last_name, role
`

type CreateUserWithRoleParams struct {
	Email     string
	Password  string
	FirstName string
	LastName  pgtype.Text
	Role      Userrole
}

type CreateUserWithRoleRow struct {
	ID        uuid.UUID
	Email     string
	FirstName string
	LastName  pgtype.Text
	Role      Userrole
}

func (q *Queries) CreateUserWithRole(ctx context.Context, arg CreateUserWithRoleParams) (CreateUserWithRoleRow, error) {
	row := q.db.QueryRow(ctx, createUserWithRole,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.Role,
	)
	var i CreateUserWithRoleRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Role,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const fetchPaginatedUsers = `-- name: FetchPaginatedUsers :many
SELECT id, email, first_name, last_name, role FROM users
ORDER BY first_name LIMIT $1 OFFSET $2
`

type FetchPaginatedUsersParams struct {
	Limit  int32
	Offset int32
}

type FetchPaginatedUsersRow struct {
	ID        uuid.UUID
	Email     string
	FirstName string
	LastName  pgtype.Text
	Role      Userrole
}

func (q *Queries) FetchPaginatedUsers(ctx context.Context, arg FetchPaginatedUsersParams) ([]FetchPaginatedUsersRow, error) {
	rows, err := q.db.Query(ctx, fetchPaginatedUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchPaginatedUsersRow
	for rows.Next() {
		var i FetchPaginatedUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchPaginatedUsersByRole = `-- name: FetchPaginatedUsersByRole :many
SELECT id, email, first_name, last_name, role FROM users
WHERE role = $3
ORDER BY first_name LIMIT $1 OFFSET $2
`

type FetchPaginatedUsersByRoleParams struct {
	Limit  int32
	Offset int32
	Role   Userrole
}

type FetchPaginatedUsersByRoleRow struct {
	ID        uuid.UUID
	Email     string
	FirstName string
	LastName  pgtype.Text
	Role      Userrole
}

func (q *Queries) FetchPaginatedUsersByRole(ctx context.Context, arg FetchPaginatedUsersByRoleParams) ([]FetchPaginatedUsersByRoleRow, error) {
	rows, err := q.db.Query(ctx, fetchPaginatedUsersByRole, arg.Limit, arg.Offset, arg.Role)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchPaginatedUsersByRoleRow
	for rows.Next() {
		var i FetchPaginatedUsersByRoleRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchUsers = `-- name: FetchUsers :many
SELECT id, email, first_name, last_name, role FROM users
ORDER BY first_name
`

type FetchUsersRow struct {
	ID        uuid.UUID
	Email     string
	FirstName string
	LastName  pgtype.Text
	Role      Userrole
}

func (q *Queries) FetchUsers(ctx context.Context) ([]FetchUsersRow, error) {
	rows, err := q.db.Query(ctx, fetchUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FetchUsersRow
	for rows.Next() {
		var i FetchUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserByEmail = `-- name: FindUserByEmail :one
SELECT id, email, first_name, last_name, role, password FROM users
WHERE email = $1 LIMIT 1
`

type FindUserByEmailRow struct {
	ID        uuid.UUID
	Email     string
	FirstName string
	LastName  pgtype.Text
	Role      Userrole
	Password  string
}

func (q *Queries) FindUserByEmail(ctx context.Context, email string) (FindUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, findUserByEmail, email)
	var i FindUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.Password,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one
SELECT id, email, first_name, last_name, role FROM users
WHERE id = $1 LIMIT 1
`

type FindUserByIdRow struct {
	ID        uuid.UUID
	Email     string
	FirstName string
	LastName  pgtype.Text
	Role      Userrole
}

func (q *Queries) FindUserById(ctx context.Context, id uuid.UUID) (FindUserByIdRow, error) {
	row := q.db.QueryRow(ctx, findUserById, id)
	var i FindUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Role,
	)
	return i, err
}

const findUserByIdWithPassword = `-- name: FindUserByIdWithPassword :one
SELECT id, email, first_name, last_name, role, password FROM users
WHERE id = $1 LIMIT 1
`

type FindUserByIdWithPasswordRow struct {
	ID        uuid.UUID
	Email     string
	FirstName string
	LastName  pgtype.Text
	Role      Userrole
	Password  string
}

func (q *Queries) FindUserByIdWithPassword(ctx context.Context, id uuid.UUID) (FindUserByIdWithPasswordRow, error) {
	row := q.db.QueryRow(ctx, findUserByIdWithPassword, id)
	var i FindUserByIdWithPasswordRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Role,
		&i.Password,
	)
	return i, err
}

const getRoledUserTableSize = `-- name: GetRoledUserTableSize :one
SELECT count(*) AS exact_count FROM users WHERE role = $1
`

func (q *Queries) GetRoledUserTableSize(ctx context.Context, role Userrole) (int64, error) {
	row := q.db.QueryRow(ctx, getRoledUserTableSize, role)
	var exact_count int64
	err := row.Scan(&exact_count)
	return exact_count, err
}

const getUserTableSize = `-- name: GetUserTableSize :one
SELECT count(*) AS exact_count FROM users
`

func (q *Queries) GetUserTableSize(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getUserTableSize)
	var exact_count int64
	err := row.Scan(&exact_count)
	return exact_count, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
  set email = $2,
  password = $3,
  first_name = $4,
  last_name = $5
WHERE id = $1
RETURNING email, first_name, last_name, role
`

type UpdateUserParams struct {
	ID        uuid.UUID
	Email     string
	Password  string
	FirstName string
	LastName  pgtype.Text
}

type UpdateUserRow struct {
	Email     string
	FirstName string
	LastName  pgtype.Text
	Role      Userrole
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
	)
	var i UpdateUserRow
	err := row.Scan(
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Role,
	)
	return i, err
}

const updateUserWithRole = `-- name: UpdateUserWithRole :one
UPDATE users
  set email = $2,
  password = $3,
  first_name = $4,
  last_name = $5,
  role = $6
WHERE id = $1
RETURNING email, first_name, last_name, role
`

type UpdateUserWithRoleParams struct {
	ID        uuid.UUID
	Email     string
	Password  string
	FirstName string
	LastName  pgtype.Text
	Role      Userrole
}

type UpdateUserWithRoleRow struct {
	Email     string
	FirstName string
	LastName  pgtype.Text
	Role      Userrole
}

func (q *Queries) UpdateUserWithRole(ctx context.Context, arg UpdateUserWithRoleParams) (UpdateUserWithRoleRow, error) {
	row := q.db.QueryRow(ctx, updateUserWithRole,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.Role,
	)
	var i UpdateUserWithRoleRow
	err := row.Scan(
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Role,
	)
	return i, err
}
