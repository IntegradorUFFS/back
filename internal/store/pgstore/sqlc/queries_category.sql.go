// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries_category.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
)

const autocompleteCategoryByLikeName = `-- name: AutocompleteCategoryByLikeName :many
SELECT id, name FROM category
WHERE name ~* $1 ORDER BY name ASC LIMIT 10
`

func (q *Queries) AutocompleteCategoryByLikeName(ctx context.Context, name string) ([]Category, error) {
	rows, err := q.db.Query(ctx, autocompleteCategoryByLikeName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO category (name) VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateCategory(ctx context.Context, name string) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, name)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM category
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteCategory, id)
	return err
}

const fetchPaginatedCategories = `-- name: FetchPaginatedCategories :many
SELECT id, name FROM category
ORDER BY name LIMIT $1 OFFSET $2
`

type FetchPaginatedCategoriesParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) FetchPaginatedCategories(ctx context.Context, arg FetchPaginatedCategoriesParams) ([]Category, error) {
	rows, err := q.db.Query(ctx, fetchPaginatedCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findCategoryById = `-- name: FindCategoryById :one
SELECT id, name FROM category
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindCategoryById(ctx context.Context, id uuid.UUID) (Category, error) {
	row := q.db.QueryRow(ctx, findCategoryById, id)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getCategoryTableSize = `-- name: GetCategoryTableSize :one
SELECT count(*) AS exact_count FROM category
`

func (q *Queries) GetCategoryTableSize(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCategoryTableSize)
	var exact_count int64
	err := row.Scan(&exact_count)
	return exact_count, err
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE category
  set name = $2
WHERE id = $1
RETURNING id, name
`

type UpdateCategoryParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, updateCategory, arg.ID, arg.Name)
	var i Category
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
