// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries_location.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
)

const autocompleteLocationByLikeName = `-- name: AutocompleteLocationByLikeName :many
SELECT id, name FROM location
WHERE name ~* $1 ORDER BY name LIMIT 10
`

func (q *Queries) AutocompleteLocationByLikeName(ctx context.Context, name string) ([]Location, error) {
	rows, err := q.db.Query(ctx, autocompleteLocationByLikeName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createLocation = `-- name: CreateLocation :one
INSERT INTO location (name) VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateLocation(ctx context.Context, name string) (Location, error) {
	row := q.db.QueryRow(ctx, createLocation, name)
	var i Location
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteLocation = `-- name: DeleteLocation :exec
DELETE FROM location
WHERE id = $1
`

func (q *Queries) DeleteLocation(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteLocation, id)
	return err
}

const fetchPaginatedLocations = `-- name: FetchPaginatedLocations :many
SELECT id, name FROM location
ORDER BY name LIMIT $1 OFFSET $2
`

type FetchPaginatedLocationsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) FetchPaginatedLocations(ctx context.Context, arg FetchPaginatedLocationsParams) ([]Location, error) {
	rows, err := q.db.Query(ctx, fetchPaginatedLocations, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Location
	for rows.Next() {
		var i Location
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findLocationById = `-- name: FindLocationById :one
SELECT id, name FROM location
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindLocationById(ctx context.Context, id uuid.UUID) (Location, error) {
	row := q.db.QueryRow(ctx, findLocationById, id)
	var i Location
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getLocationTableSize = `-- name: GetLocationTableSize :one
SELECT count(*) AS exact_count FROM location
`

func (q *Queries) GetLocationTableSize(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getLocationTableSize)
	var exact_count int64
	err := row.Scan(&exact_count)
	return exact_count, err
}

const updateLocation = `-- name: UpdateLocation :one
UPDATE location
  set name = $2
WHERE id = $1
RETURNING id, name
`

type UpdateLocationParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) UpdateLocation(ctx context.Context, arg UpdateLocationParams) (Location, error) {
	row := q.db.QueryRow(ctx, updateLocation, arg.ID, arg.Name)
	var i Location
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
