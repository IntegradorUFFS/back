// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package pgstore

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Transactiontype string

const (
	TransactiontypeIn       Transactiontype = "in"
	TransactiontypeOut      Transactiontype = "out"
	TransactiontypeTransfer Transactiontype = "transfer"
)

func (e *Transactiontype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Transactiontype(s)
	case string:
		*e = Transactiontype(s)
	default:
		return fmt.Errorf("unsupported scan type for Transactiontype: %T", src)
	}
	return nil
}

type NullTransactiontype struct {
	Transactiontype Transactiontype
	Valid           bool // Valid is true if Transactiontype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactiontype) Scan(value interface{}) error {
	if value == nil {
		ns.Transactiontype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Transactiontype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactiontype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Transactiontype), nil
}

type Userrole string

const (
	UserroleViewer  Userrole = "viewer"
	UserroleManager Userrole = "manager"
	UserroleAdmin   Userrole = "admin"
)

func (e *Userrole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Userrole(s)
	case string:
		*e = Userrole(s)
	default:
		return fmt.Errorf("unsupported scan type for Userrole: %T", src)
	}
	return nil
}

type NullUserrole struct {
	Userrole Userrole
	Valid    bool // Valid is true if Userrole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserrole) Scan(value interface{}) error {
	if value == nil {
		ns.Userrole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Userrole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserrole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Userrole), nil
}

type Category struct {
	ID   uuid.UUID
	Name string
}

type Location struct {
	ID   uuid.UUID
	Name string
}

type LocationMaterial struct {
	ID         uuid.UUID
	Quantity   float32
	MaterialID uuid.UUID
	LocationID uuid.UUID
}

type Material struct {
	ID          uuid.UUID
	Name        string
	Description pgtype.Text
	Quantity    float32
	CategoryID  uuid.UUID
	UnitID      uuid.UUID
}

type Transaction struct {
	ID                uuid.UUID
	Quantity          float32
	CreatedAt         pgtype.Timestamp
	Type              Transactiontype
	OriginLocationID  uuid.UUID
	DestinyLocationID uuid.UUID
	MaterialID        uuid.UUID
}

type Unit struct {
	ID        uuid.UUID
	Name      string
	ShortName pgtype.Text
}

type User struct {
	ID        uuid.UUID
	Email     string
	Password  string
	FirstName string
	LastName  pgtype.Text
	Role      Userrole
	CreatedAt pgtype.Timestamp
}
