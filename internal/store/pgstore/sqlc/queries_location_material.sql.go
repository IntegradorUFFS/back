// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries_location_material.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
)

const createLocationMaterial = `-- name: CreateLocationMaterial :one
INSERT INTO location_material (
  quantity, material_id, location_id
) VALUES (
  $1, $2, $3
)
RETURNING id, quantity, material_id, location_id
`

type CreateLocationMaterialParams struct {
	Quantity   float32
	MaterialID uuid.UUID
	LocationID uuid.UUID
}

func (q *Queries) CreateLocationMaterial(ctx context.Context, arg CreateLocationMaterialParams) (LocationMaterial, error) {
	row := q.db.QueryRow(ctx, createLocationMaterial, arg.Quantity, arg.MaterialID, arg.LocationID)
	var i LocationMaterial
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.MaterialID,
		&i.LocationID,
	)
	return i, err
}

const deleteLocationMaterial = `-- name: DeleteLocationMaterial :exec
DELETE FROM location_material
WHERE id = $1
`

func (q *Queries) DeleteLocationMaterial(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteLocationMaterial, id)
	return err
}

const fetchPaginatedLocationMaterials = `-- name: FetchPaginatedLocationMaterials :many
SELECT id, quantity, material_id, location_id FROM location_material
ORDER BY id LIMIT $1 OFFSET $2
`

type FetchPaginatedLocationMaterialsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) FetchPaginatedLocationMaterials(ctx context.Context, arg FetchPaginatedLocationMaterialsParams) ([]LocationMaterial, error) {
	rows, err := q.db.Query(ctx, fetchPaginatedLocationMaterials, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LocationMaterial
	for rows.Next() {
		var i LocationMaterial
		if err := rows.Scan(
			&i.ID,
			&i.Quantity,
			&i.MaterialID,
			&i.LocationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findLocationMaterialById = `-- name: FindLocationMaterialById :one
SELECT id, quantity, material_id, location_id FROM location_material
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindLocationMaterialById(ctx context.Context, id uuid.UUID) (LocationMaterial, error) {
	row := q.db.QueryRow(ctx, findLocationMaterialById, id)
	var i LocationMaterial
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.MaterialID,
		&i.LocationID,
	)
	return i, err
}

const findLocationMaterialByRelations = `-- name: FindLocationMaterialByRelations :one
SELECT id, quantity, material_id, location_id FROM location_material
WHERE material_id = $1 AND location_id = $2 LIMIT 1
`

type FindLocationMaterialByRelationsParams struct {
	MaterialID uuid.UUID
	LocationID uuid.UUID
}

func (q *Queries) FindLocationMaterialByRelations(ctx context.Context, arg FindLocationMaterialByRelationsParams) (LocationMaterial, error) {
	row := q.db.QueryRow(ctx, findLocationMaterialByRelations, arg.MaterialID, arg.LocationID)
	var i LocationMaterial
	err := row.Scan(
		&i.ID,
		&i.Quantity,
		&i.MaterialID,
		&i.LocationID,
	)
	return i, err
}

const getLocationMaterialTableSize = `-- name: GetLocationMaterialTableSize :one
SELECT count(*) AS exact_count FROM location_material
`

func (q *Queries) GetLocationMaterialTableSize(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getLocationMaterialTableSize)
	var exact_count int64
	err := row.Scan(&exact_count)
	return exact_count, err
}

const updateLocationMaterialLocation = `-- name: UpdateLocationMaterialLocation :one
UPDATE location_material
  set location_id = $2
WHERE id = $1
RETURNING quantity, material_id, location_id
`

type UpdateLocationMaterialLocationParams struct {
	ID         uuid.UUID
	LocationID uuid.UUID
}

type UpdateLocationMaterialLocationRow struct {
	Quantity   float32
	MaterialID uuid.UUID
	LocationID uuid.UUID
}

func (q *Queries) UpdateLocationMaterialLocation(ctx context.Context, arg UpdateLocationMaterialLocationParams) (UpdateLocationMaterialLocationRow, error) {
	row := q.db.QueryRow(ctx, updateLocationMaterialLocation, arg.ID, arg.LocationID)
	var i UpdateLocationMaterialLocationRow
	err := row.Scan(&i.Quantity, &i.MaterialID, &i.LocationID)
	return i, err
}

const updateLocationMaterialQuantity = `-- name: UpdateLocationMaterialQuantity :one
UPDATE location_material
  set quantity = $2
WHERE id = $1
RETURNING quantity, material_id, location_id
`

type UpdateLocationMaterialQuantityParams struct {
	ID       uuid.UUID
	Quantity float32
}

type UpdateLocationMaterialQuantityRow struct {
	Quantity   float32
	MaterialID uuid.UUID
	LocationID uuid.UUID
}

func (q *Queries) UpdateLocationMaterialQuantity(ctx context.Context, arg UpdateLocationMaterialQuantityParams) (UpdateLocationMaterialQuantityRow, error) {
	row := q.db.QueryRow(ctx, updateLocationMaterialQuantity, arg.ID, arg.Quantity)
	var i UpdateLocationMaterialQuantityRow
	err := row.Scan(&i.Quantity, &i.MaterialID, &i.LocationID)
	return i, err
}
